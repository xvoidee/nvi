" vi:syntax=vim

" Toggle file explorer
nnoremap <C-T> :NERDTreeToggle<CR>

" FZF mappings
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>h :History<CR>
nnoremap <leader>m :Marks<CR>

" Diffview commands
nnoremap <leader>dvo :DiffviewOpen<CR>
nnoremap <leader>dvc :DiffviewClose<CR>

" Useful mappins
nnoremap <leader>vs :set hls!<CR>|                       " Toggle highlight on/off

" Moving around
nnoremap <Tab> :lua require("flash")["jump"]()<CR>|      " Open fast jump

" Navigation between splits
nnoremap <C-H> <C-W><C-H>|                               " left
nnoremap <C-J> <C-W><C-J>|                               " down
nnoremap <C-K> <C-W><C-K>|                               " up
nnoremap <C-L> <C-W><C-L>|                               " right

" Working with buffers
nnoremap <F2> :wa<CR>|                                   " Save active buffer, keep opened
nnoremap <F8> :bp<bar>sp<bar>bn<bar>bd<CR>|              " Try to close active buffer
nnoremap <F10> :qa!<CR>|                                 " Ignore changes and quit
nnoremap <F12> :wqa<CR>|                                 " Save changes and quit
inoremap <silent> <ESC> <ESC>:wa<CR>|                    " Auto save on switch to command mode

" Cycle through opened buffers
nnoremap <S-h>     :bprev<CR>
nnoremap <S-l>     :bnext<CR>
nnoremap <S-Left>  :bprev<CR>
nnoremap <S-Right> :bnext<CR>
nnoremap ,         :bprev<CR>
nnoremap .         :bnext<CR>

" coc mappings
nmap <silent> <F3>               <Plug>(coc-definition)
nmap <silent> <F4>               <Plug>(coc-implementation)
nmap <silent> <F5>               <Plug>(coc-references)
nmap <leader>rn                  <Plug>(coc-rename)
nmap <leader>rf                  <Plug>(coc-refactor)
nmap <leader>st                  :call CocAction('showSubTypes') <CR>
imap <C-l>                       <Plug>(coc-snippets-expand)
inoremap <silent><expr> <c-space> coc#refresh()

" Full-text search
nnoremap <leader>ag :Ag<CR>
nnoremap <leader>ar :AgRaw<Space>
nnoremap <leader>aw :AgRaw <C-r><C-w><CR>
xnoremap <leader>as :<C-u>AgRaw <C-r>=GetVisualSelection()<CR><CR>

"nnoremap <leader>ag :Ag<CR>
"-nnoremap <leader>ar :AgRaw<Space>
"-nnoremap <leader>aw :AgRaw <C-r><C-w><CR>
"-xnoremap <leader>as :<C-u>AgRaw <C-r>=GetVisualSelection()<CR><CR>
"+"nnoremap <leader>ar :AgRaw<Space>
"+nnoremap <leader>aw :Ag <C-r><C-w><CR>
"+xnoremap <leader>as :<C-u>Ag <C-r>=GetVisualSelection()<CR><CR>

function! GetVisualSelection()
  let l:save_reg     = getreg('"')
  let l:save_regtype = getregtype('"')
  let l:save_cursor  = getpos(".")
  let l:save_visual  = getpos("v")

  silent! normal! gv"zy

  let l:selection = substitute(getreg("z"), '\\', '\\\\', 'g')
  let l:selection = substitute(l:selection, '"', '\\"', 'g')

  call setreg('"', l:save_reg, l:save_regtype)
  call setpos(".", l:save_cursor)

  if mode() ==# 'v'
    call setpos("v", l:save_visual)
  endif

  return l:selection
endfunction

